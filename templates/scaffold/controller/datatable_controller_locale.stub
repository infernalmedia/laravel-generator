<?php

namespace $NAMESPACE_CONTROLLER$;

use Response;
use $NAMESPACE_DATATABLES$\$MODEL_NAME$DataTable;
use $NAMESPACE_REQUEST$\Create$MODEL_NAME$Request;
use $NAMESPACE_REQUEST$\Update$MODEL_NAME$Request;
use $NAMESPACE_REPOSITORY$\$MODEL_NAME$Repository;
use $NAMESPACE_APP$\Http\Controllers\AppBaseController;
use $NAMESPACE_APP$\Traits\CrudControllerTrait;
use Illuminate\Http\Response as ResponseCode;

class $MODEL_NAME$Controller extends AppBaseController
{
    use CrudControllerTrait;

    const BASE_VIEW_PATH = '$VIEW_PREFIX$$MODEL_NAME_PLURAL_SNAKE$';
    const BASE_ROUTE_PATH = '$ROUTE_NAMED_PREFIX$$MODEL_NAME_PLURAL_CAMEL$';
    const MODEL_LANG_PATH = "models/$MODEL_NAME_PLURAL_CAMEL$";
    const MODEL_GENDER = "male";

    /** @var $MODEL_NAME$Repository $$MODEL_NAME_CAMEL$Repository*/
    private $$MODEL_NAME_CAMEL$Repository;

    public function __construct(
        $MODEL_NAME$Repository $$MODEL_NAME_CAMEL$Repo
    ){
        $this->$MODEL_NAME_CAMEL$Repository = $$MODEL_NAME_CAMEL$Repo;
    }

    /**
     * Display a listing of the $MODEL_NAME$.
     *
     * @param $MODEL_NAME$DataTable $$MODEL_NAME_CAMEL$DataTable
     *
     * @return Response
     */
     public function index($MODEL_NAME$DataTable $$MODEL_NAME_CAMEL$DataTable)
    {
        return $$MODEL_NAME_CAMEL$DataTable->render("{$this->getBaseViewPath()}.index");
    }

    /**
     * Show the form for creating a new $MODEL_NAME$.
     *
     * @return Response
     */
    public function create()
    {
        return $this->returnView('create');
    }

    /**
     * Store a newly created $MODEL_NAME$ in storage.
     *
     * @param Create$MODEL_NAME$Request $request
     * @return Response
     */
    public function store(Create$MODEL_NAME$Request $request)
    {
        $input = $request->all();

        $this->$MODEL_NAME_CAMEL$Repository->create($input);
        
        $this->getModelFlashMessage('success', "saved-gender.{$this->getModelGender()}");

        return redirect($this->getRoute('index'));
    }

    /**
     * Display the specified $MODEL_NAME$.
     *
     * @param int $id
     * @return Response
     */
    public function show($id)
    {
        $$MODEL_NAME_CAMEL$ = $this->$MODEL_NAME_CAMEL$Repository->find($id);

        if (empty($$MODEL_NAME_CAMEL$)) {
            return $this->notFoundRedirect();
        }

        return $this->returnView('show')->with('$MODEL_NAME_CAMEL$', $$MODEL_NAME_CAMEL$);
    }

    /**
     * Show the form for editing the specified $MODEL_NAME$.
     *
     * @param int $id
     * @return Response
     */
    public function edit($id)
    {
        $$MODEL_NAME_CAMEL$ = $this->$MODEL_NAME_CAMEL$Repository->find($id);

        if (empty($$MODEL_NAME_CAMEL$)) {
            return $this->notFoundRedirect();
        }

        return $this->returnView('edit')->with('$MODEL_NAME_CAMEL$', $$MODEL_NAME_CAMEL$);
    }

    /**
     * Update the specified $MODEL_NAME$ in storage.
     *
     * @param int $id
     * @param Update$MODEL_NAME$Request $request
     * @return Response
     */
    public function update($id, Update$MODEL_NAME$Request $request)
    {
        $$MODEL_NAME_CAMEL$ = $this->$MODEL_NAME_CAMEL$Repository->find($id);

        if (empty($$MODEL_NAME_CAMEL$)) {
            return $this->notFoundRedirect();
        }

        $$MODEL_NAME_CAMEL$ = $this->$MODEL_NAME_CAMEL$Repository->update($request->all(), $id);

        $this->getModelFlashMessage('success', "updated-gender.{$this->getModelGender()}");

        return redirect($this->getRoute('index'));
    }

    /**
     * Remove the specified $MODEL_NAME$ from storage.
     * 
     * @param int $id
     * @return Response
     */
    public function destroy($id)
    {
        $$MODEL_NAME_CAMEL$ = $this->$MODEL_NAME_CAMEL$Repository->find($id);

        if (empty($$MODEL_NAME_CAMEL$)) {
            return $this->notFoundRedirect();
        }

        $this->$MODEL_NAME_CAMEL$Repository->delete($id);

        $this->getModelFlashMessage('success', "deleted-gender.{$this->getModelGender()}");

        return redirect($this->getRoute('index'), ResponseCode::HTTP_SEE_OTHER);
    }

    protected function getBaseViewPath()
    {
        return self::BASE_VIEW_PATH;
    }

    protected function getBaseRoutePath()
    {
        return self::BASE_ROUTE_PATH;
    }

    protected function getModelLangPath()
    {
        return self::MODEL_LANG_PATH;
    }

    private function getModelGender()
    {
        return self::MODEL_GENDER;
    }
}
