<?php

namespace $NAMESPACE_CONTROLLER$;

use $NAMESPACE_REQUEST$\$MODEL_NAME$\Create$MODEL_NAME$Request;
use $NAMESPACE_REQUEST$\$MODEL_NAME$\Update$MODEL_NAME$Request;
use $NAMESPACE_REPOSITORY$\$MODEL_NAME$Repository;
use $NAMESPACE_APP$\Http\Controllers\AppBaseController;
use $NAMESPACE_APP$\Traits\CrudControllerTrait;
use Illuminate\Http\Request;
use Illuminate\View\View;
use Illuminate\Http\RedirectResponse;
use Illuminate\Routing\Redirector;


class $MODEL_NAME$Controller extends AppBaseController
{
    use CrudControllerTrait;

    private const string BASE_VIEW_PATH = '$VIEW_PREFIX$$MODEL_NAME_PLURAL_SNAKE$';
    private const string BASE_ROUTE_PATH = '$ROUTE_NAMED_PREFIX$$MODEL_NAME_PLURAL_CAMEL$';
    private const string MODEL_LANG_PATH = "models/$MODEL_NAME_PLURAL_CAMEL$";
    private const string MODEL_GENDER = "male";

    public function __construct(
        private $MODEL_NAME$Repository $$MODEL_NAME_CAMEL$Repository
    ) {
        //
    }

    public function index(Request $request): View
    {
        $$MODEL_NAME_PLURAL_CAMEL$ = $this->$MODEL_NAME_CAMEL$Repository->$RENDER_TYPE$;

        return $this->returnView('index')
            ->with('$MODEL_NAME_PLURAL_CAMEL$', $$MODEL_NAME_PLURAL_CAMEL$);
    }

    public function create(): View
    {
        return $this->returnView('create');
    }

    public function store(Create$MODEL_NAME$Request $request): Redirector|RedirectResponse
    {
        $input = $request->all();

        $this->$MODEL_NAME_CAMEL$Repository->create($input);
        
        $this->getModelFlashMessage('success', "saved-gender.{$this->getModelGender()}");

        return redirect($this->getRoute('index'));
    }

    public function show(int $id): View|Redirector|RedirectResponse
    {
        $$MODEL_NAME_CAMEL$ = $this->$MODEL_NAME_CAMEL$Repository->find($id);

        if (empty($$MODEL_NAME_CAMEL$)) {
            return $this->notFoundRedirect();
        }

        return $this->returnView('show')->with('$MODEL_NAME_CAMEL$', $$MODEL_NAME_CAMEL$);
    }

    public function edit(int $id): View|Redirector|RedirectResponse
    {
        $$MODEL_NAME_CAMEL$ = $this->$MODEL_NAME_CAMEL$Repository->find($id);

        if (empty($$MODEL_NAME_CAMEL$)) {
            return $this->notFoundRedirect();
        }

        return $this->returnView('edit')->with('$MODEL_NAME_CAMEL$', $$MODEL_NAME_CAMEL$);
    }

    public function update(int $id, Update$MODEL_NAME$Request $request): Redirector|RedirectResponse
    {
        $$MODEL_NAME_CAMEL$ = $this->$MODEL_NAME_CAMEL$Repository->find($id);

        if (empty($$MODEL_NAME_CAMEL$)) {
            return $this->notFoundRedirect();
        }

        $$MODEL_NAME_CAMEL$ = $this->$MODEL_NAME_CAMEL$Repository->update($request->all(), $id);

        $this->getModelFlashMessage('success', "updated-gender.{$this->getModelGender()}");

        return redirect($this->getRoute('index'));
    }

    public function destroy(int $id): Redirector|RedirectResponse
    {
        $$MODEL_NAME_CAMEL$ = $this->$MODEL_NAME_CAMEL$Repository->find($id);

        if (empty($$MODEL_NAME_CAMEL$)) {
            return $this->notFoundRedirect();
        }

        $this->$MODEL_NAME_CAMEL$Repository->delete($id);

        $this->getModelFlashMessage('success', "deleted-gender.{$this->getModelGender()}");

        return redirect($this->getRoute('index'));
    }

    protected function getBaseViewPath(): string
    {
        return self::BASE_VIEW_PATH;
    }

    protected function getBaseRoutePath(): string
    {
        return self::BASE_ROUTE_PATH;
    }

    protected function getModelLangPath(): string
    {
        return self::MODEL_LANG_PATH;
    }

    private function getModelGender(): string
    {
        return self::MODEL_GENDER;
    }
}
