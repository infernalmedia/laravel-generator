<template>
  <Table
    :filters="queryBuilderProps.filters"
    :search="queryBuilderProps.search"
    :columns="queryBuilderProps.columns"
    :on-update="setQueryBuilder"
    :translations="queryBuilderProps.translations"
    :meta="models"
  >
    <template #head>
      <tr>
        <HeaderCell
          v-for="column in columns"
          :key="column.key"
          :cell="_headerCellData(column.key, column.sortable)"
          :translations="translations"
        >
          {{ column.label }}
        </HeaderCell>
        <td></td>
      </tr>
    </template>

    <template #body>
      <tr v-for="model in models.data" :key="model.id">
        <td
          v-for="column in columns"
          v-show="showColumn(column.key)"
          :key="column.key"
        >
          {{ model[column.key] }}
        </td>
        <td class="d-flex justify-content-around">
          <div class="btn-group">
            <a
              :href="$route(modelRoutes.edit, model.id)"
              class="btn btn-secondary btn-sm"
            >
              <i class="fa fa-edit"></i>
            </a>
            <button
              class="btn btn-danger btn-sm"
              @click="deleteModel(model.id)"
            >
              <i class="fa fa-trash"></i>
            </button>
          </div>
        </td>
      </tr>
    </template>
  </Table>
</template>

<script>
import {
  InteractsWithQueryBuilder,
  PureCSS,
} from '@protonemedia/inertiajs-tables-laravel-query-builder'

export default {
  components: {
    Table: PureCSS.Table,
    HeaderCell: PureCSS.HeaderCell,
  },
  mixins: [
    InteractsWithQueryBuilder,
    // eslint-disable-next-line no-undef
    Components,
  ],

  props: {
    models: {
      type: Object,
      required: true,
    },
    modelRoutes: {
      type: Object,
      required: true,
    },
  },
  computed: {
    columns() {
      return this.queryBuilderProps.columns
    },
    translations() {
      return this.queryBuilderProps.translations
    },
  },
  methods: {
    deleteModel($modelId) {
      if (confirm(this.translations.are_you_sure)) {
        try {
          this.$inertia.delete(this.$route(this.modelRoutes.destroy, $modelId))
        } catch (error) {
          console.error(error)
        }
      }
    },
  },
}
</script>
